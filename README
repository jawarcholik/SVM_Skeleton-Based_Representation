Jacob Warcholik

Implementation:

featureRepresentation.py
  This Script contains the representation code for feature extraction required for
  deliverable 2 of this project. It gives the user the option of two algorithms.
  The first is the RAD algorithm which uses joints with IDs 1, 4, 8, 12, 16, and 20.
  This corresponds to the hip, head, hands and feet. In the RAD algorithm 10 histograms
  are computed, 5 describing the distance of the extremity to the hips and 5 describing
  the angle between an extremity and the extremity found directly clockwise of it assuming
  the body is star shaped. The distances are calculated using the euclidean distance formula.
  The angles are calculated using the relation that the cosine of the angle between two vectors
  is equal to the dot product of the vectors divided by the product of the vector magnitudes.
  Each histogram is normalized by dividing every element in the histogram by the total Number
  of frames being used. The second algorithm offered by this script is the HJPD algorithm.
  In this algorithm every joint is used and related to the hips to find the displacement
  of each joint in every frame. The displacement is calculated by taking the absolute values
  of each difference in the x, y and z components of the joint being related to the hip position.
  From this 19 histograms are created representing each joint. Once again these histograms are
  normalized by dividing by the total number of frames being used. For both algorithms the
  normalized histograms are concatenated into a single feature vector which is written to the
  appropriate output file for the selected mode and algorithm. The current output files were
  created using a bin size of 10 but this value is customizable to aid in the testing of deliverable
  2.

dataFormatting.py
  This script takes the data files outputted from the featureRepresentation.py script from D1 and
  converts it to the LIBSVM data format. These files have contain _d2 to notate it is the deliverable
  2 format.

svmLearning.py
  This script takes two data files. The first file the user is prompted for is the training data
  and the second is the testing data with the .t suffix. The script first reads the files to
  create the labels and feature vectors for the SVM problem. Then it searches for a scale parameter
  and scales the training and testing feature vectors. Once scaled the SVM model is trained using the
  optimal Cost and Gamma parameters found from testing the data using the tools in the libsvm library.
  If the files are not known the script will show that the best cost and gamma values are not known
  and will prompt the user for them instead. Once a model is trained it is then tested with scaled
  test feature vectors. Finally, evaluation metrics for the model accuracy and a confusion matrix
  are returned as well as an output file of the predicted labels.

Compile and Run:

featureRepresentation.py
  To run this file simply navigate to the folder containing the script and enter the command:

  python3 featureRepresentation.py

  When the script is run the user will be prompted for four items; the mode, algorithm, dataset
  file path, and number of bins to use. The mode allows the user to choose between training and testing.
  The algorithm allows the user to choose the RAD algorithm or the custom (HJPD) algorithm.
  The file path tells the script where to get the sensor data files from and the bin number setting allows
  for ease of testing different number of bins in the histograms.

dataFormatting.py
  To run this file simply navigate to the folder containing the script and enter the command:

  python3 dataFormatting.py

  When the script is run the user will be prompted for the data file from D1 that needs to be converted
  to the LIBSVM format for D2.

svmLearning.py
  To run this file simply navigate to the folder containing the script and enter the command:

  python3 svmLearning.py

  When this script is run the user is prompted for two data files in the LIBSVM format. The first
  file is for the training dataset and the second file is for the testing dataset.


Experimental Results:
  The optimal Cost and Gamma values found for the RAD algorithm were c=2.0 and g=0.03125.
  The optimal Cost and Gamma values found for the HJPD algorithm were c=512.0 and g=0.0078125.

  RAD Model:
    Accuracy = 52.0833% (25/48)

    Confusion Matrix:
    Activity #  8   10  12  13  15  16
      8         7   1   0   0   0   0
      10        2   3   1   0   0   2
      12        0   1   5   0   0   2
      13        0   1   2   4   0   1
      15        0   0   1   1   3   3
      16        0   3   0   1   1   3



  HJPD Model:
    Accuracy = 70.8333% (34/48)

    Confusion Matrix:
    Activity #  8   10  12  13  15  16
      8         8   0   0   0   0   0
      10        3   4   0   1   0   0
      12        0   0   6   1   0   1
      13        2   0   0   6   0   0
      15        0   0   0   0   4   4
      16        0   1   0   0   1   6
    
